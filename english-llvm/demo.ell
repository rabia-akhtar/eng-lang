/* demo code for English Language */
/* TODO: when reading in from fread, convert buffer to a string */
/* TODO: string splitAt function */

/* function finds top twenty (this value TBD) most relevant words in a text document */
string [] find_relevant(string file_name){

	file_ptr fp;
    fp = open(file_name, "rb");
   
    if (fp) {

    	/* maximum size of essay we can process, TBD */
    	string buffer[2000];
    	fread(buffer, 2000, 1, fp);

    	/* todo */
    	string doc = toString(buffer);   	

    	int size = string_length(doc);

    	string [size] words;

    	/* todo */
    	words = doc.split_at(" ");

    	/* count the frequency of each word in the text document and store in count */
    	int [size] count;

    	int i;
    	int j;
    	int found = 0;

    	for (i = 0; i < size; i = i + 1){
        	string current = words[i];
        	for (j = 0; j< size; j = j+1){
        	    /* check if same word has been found */
        		if (found == 0){
	        		if (string_compare(current, words[j]) == 0){
	        			found = 1;
	        			count [j]++;
	        		}
        		}
        	}
        	found = 0;
    	}

    	/* find top twenty words */
    	string [20] top_words;
    	int [20] top_counts;

    	int max = 0;
    	max_index = 0;
    	string max_word;
    	int i_top = 0;
    	int k;

    	for (k = 0; k< 20; k = k +1){
    		for (i = 0; i < size; i = i + 1){
    			if (max < count[i]){
    				int present = 0;
    				for (j = 0; j<5; j = j+1){
    					/* check if value already put in top words */
	    				if (count[i] == top_counts[j]){
	    					if (words[i] == top_words[j]){
	    						present = 1;
	    				}
	    				}

	    			}

	    			if(present == 0){
	    				max_index = i;
	    				max = count[i];

	    			}
    		}}
  
			top_words[k] = words[max_index];
			top_counts[k] = count[max_index];
			i_top++;
			max = 0;


    	}
    close(fp);

    return top_words;
    }

    close(fp);

    return string [5];

    }

/* check for simlarity of content between two files, returns 1 for similar, 0 for not */
int check_similar(string file1, string file2){

	/* find relevant words in each document */
	string [20] relevant1 = find_relevant(file1);
	string [20] relevant2 = find_relevant(file2);

	/* check for similarity in content */
	int i;
	int j;
	int similar = 0;
	for(i = 0; i< 20; i = i + 1){
		for(j = 0; j< 20; j = j + 1){
			if(string_compare(relevant1[i], relevant2[i]) == 0){
				similar++;
			}
		}
	}

	if (similar > 5){
		return 1;
	}

	return 0;

}

int main()
{
  return 0;
}
